<?php
/**
 * This file is auto-generated by PhpCocktail to help IDEs understand code where namespaces classes get dinamicly
 * 	shifted to root namespace.
 * It shall not be run at all, this the die.
 */

die('This file is not intended to be run.');

/**
 * @author t
 * @package Cocktail\Application
 * @version 1.01
 */
abstract class Application extends Cocktail\Application {};

/**
 * Base config file for applications. In the app config App.App.* refers to fields in this object
 * @author t
 * @package Cocktail\Application
 * @version 1.01
 */
class ApplicationConfig extends Cocktail\ApplicationConfig {};

/**
 * @author t
 * @package Cocktail\Application
 * @version 1.01
 */
class ApplicationConsole extends Cocktail\ApplicationConsole {};

/**
 * @author t
 * @package Cocktail\Application
 * @version 1.01
 */
class ApplicationConsoleConfig extends Cocktail\ApplicationConsoleConfig {};

/**
 * simple http server application
 * @author t
 * @package Cocktail\Application
 * @version 1.01
 */
class ApplicationHttp extends Cocktail\ApplicationHttp {};

/**
 * @author t
 * @package Cocktail\Application
 * @version 1.01
 */
class ApplicationHttpConfig extends Cocktail\ApplicationHttpConfig {};

/**
 * facade for auth drivers. These drivers have to be registered with Auth::registerDriver() by an id and later the
 * 	drivers can be referenced by that id. If you use only one auth driver, you can always leave id empty to use 'default'
 * @author t
 * @package Cocktail\Auth
 * @version 1.01
 */
class Auth extends Cocktail\Auth {};

/**
 * basic class to be extended
 * @author t
 * @package Cocktail\Auth
 * @version 1.01
 */
abstract class AuthDriver extends Cocktail\AuthDriver {};

/**
 * basic class for input validator objects. Uses validation functionality of models.
 *
 * @author t
 * @package Cocktail\Auth
 * @version 1.01
 */
class AuthDriverBasic extends Cocktail\AuthDriverBasic {};

/**
 * basic class for input validator objects. Uses validation functionality of models.
 *
 * @author t
 * @package Cocktail\Auth
 * @version 1.01
 */
class AuthException extends Cocktail\AuthException {};

/**
 * I am used to produce nicer output by eg. indenting blocks properly or compacting. Set
 * @author t
 * @package Cocktail\Beautify
 * @version 1.01
 */
class Beautify extends Cocktail\Beautify {};

/**
 * Block is a simplified controller which has only one action, generate() and so a toString() method
 * Blocks may have their children, which can be hmvcrouted (see hmvccontroller).
 * You can find some sample blocks in Cocktail, like column container, etc.
 *
 * @author t
 * @package Cocktail\Block
 * @version 1.01
 */
abstract class Block extends Cocktail\Block {};

/**
 * @author t
 * @package Cocktail\Block
 * @version 1.01
 */
class BlockContainer extends Cocktail\BlockContainer {};

/**
 * @author t
 * @package Cocktail\Block
 * @version 1.01
 */
class BlockFoo extends Cocktail\BlockFoo {};

/**
 * root namespace alias for IDEs 
 */
class BlockHmvc extends Cocktail\BlockHmvc {};

/**
 * @author t
 * @package Cocktail\Block
 * @version 1.01
 */
class BlockNavbar extends Cocktail\BlockNavbar {};

/**
 * @author t
 * @package Cocktail\Block
 * @version 1.01
 */
class BlockNavbarTop extends Cocktail\BlockNavbarTop {};

/**
 * Basic controller class. Has functionality for:
 * 	- invoke() to call an action method with all the chimes, can be extended by overriding
 * 	- _before() and _after() which also can be extended, and called by invoke() with same params as main action
 * 	- automatic templating using a layout template
 *  - getting/setting layout data
 *  - handling responses by action methods
 *  - autoparams for URI (or other sequential type routing), they pull params from the request param stack
 * @author t
 * @package Cocktail\Controller
 * @version 1.01
 */
class Controller extends Cocktail\Controller {};

/**
 * @author t
 * @package Cocktail\Controller
 * @version 1.01
 */
class ControllerHmvc extends Cocktail\ControllerHmvc {};

/**
 * @author t
 * @package Cocktail\Controller
 * @version 1.01
 */
class ControllerPage extends Cocktail\ControllerPage {};

/**
 * I manage html assets - js, css and return in a form suitable for rendering in a html source
 * @author t
 * @package Cocktail\Html
 * @version 1.01
 */
class HtmlAssets extends Cocktail\HtmlAssets {};

/**
 * basic class for input validator objects. Uses validation functionality of models.
 *
 * @author t
 * @package Cocktail\Model
 * @version 1.01
 */
abstract class ModelValidator extends Cocktail\ModelValidator {};

/**
 * a decorator class that works with any models. To create your validator,
 *
 * @author t
 * @package Cocktail\Model
 * @version 1.01
 */
abstract class ModelValidatorDecorator extends Cocktail\ModelValidatorDecorator {};

/**
 * Base class for all kind of requests. Wraps all input that is available at startup
 * @author t
 * @package Cocktail\Request
 * @version 1.01
 *
 */
abstract class Request extends Cocktail\Request {};

/**
 * request class for console apps
 * @author t
 * @package Cocktail\Application
 * @version 1.01
 */
class RequestConsole extends Cocktail\RequestConsole {};

/**
 * RequestHttp is both a subclass of Request and decorator for HttpRequest (PECL package), if that is available
 *	subclass of Request, for transparent object handling wherever possible. Eg. same code can be run by a http request
 *		or shell command
 * @author t
 * @package Cocktail\Request
 * @version 1.01
 * @property-read array $REQUEST
 * @property-read array $GET
 * @property-read array $POST
 * @property-read array $COOKIE
 * @property-read boolean $isHttps
 * @property-read 'http://'|'https://' $schema
 * @property-read string $host
 * @property-read string $baseUrl eg. http://api.yourdomain.com
 * @property-read string $pathinfo eg. ...
 * @property-read string $requestUri eg. ...
 * @property-read string $serverProtocol
 * @property-read string $requestMethod GET, POST etc.
 * @property-read string $isAjax
 * @property-read string $remoteAddress
 * @property-read string $userAgent
 * @property-read string $accept
 * @property-read string $acceptLanguage
 * @property-read int $tstamp
 */
class RequestHttp extends Cocktail\RequestHttp {};

/**
 * Response abstract for all kinds of responses.
 * @author t
 * @package Cocktail\Response
 * @version 1.01
 */
abstract class Response extends Cocktail\Response {};

/**
 * Response config abstract, to hold common response options
 *
 * @author t
 * @package Cocktail\Response
 * @version 1.01
 */
abstract class ResponseConfig extends Cocktail\ResponseConfig {};

/**
 * simple response for console apps
 * @author t
 * @package Cocktail\Response
 * @version 1.01
 */
class ResponseConsole extends Cocktail\ResponseConsole {};

/**
 * ResponseConsole config
 * @author t
 * @package Cocktail\Response
 * @version 1.01
 */
class ResponseConsoleConfig extends Cocktail\ResponseConsoleConfig {};

/**
 * Description of ResponseHttp
 * @author t
 * @package Cocktail\Response
 * @version 1.01
 */
class ResponseHttp extends Cocktail\ResponseHttp {};

/**
 * ResponseHttp config
 * @author t
 * @package Cocktail\Response
 * @version 1.01
 */
class ResponseHttpConfig extends Cocktail\ResponseHttpConfig {};

/**
 * this config class encapsulates all information, gathered by the router, and sufficient to run an action
 * @author t
 * @package Cocktail\Route
 * @version 1.01
 */
class Route extends Cocktail\Route {};

/**
 * @author t
 * @package Cocktail\Router
 * @version 1.01
 */
abstract class Router extends Cocktail\Router {};

/**
 * RouterFilemapper is the most useful automatic route mapper. It extends Cocktail\Router to avoid resolving loop
 * @author t
 * @package Cocktail\Router
 * @version 1.01
 */
class RouterFileMapper extends Cocktail\RouterFileMapper {};

/**
 * Base controller class for built-in console tool. Extend this to create shell apps.
 * It has built in functionality to handle command lines params and mapping them to object properties. Eg. define the
 * 		property $_paramFoo and access it via {shake} --foo
 * 		Also you can define a shorthand param name in phpdoc just add eg. '-q' on a line in the php docblock
 * 		Different property types are handled differently. You should define a var type in phpdoc, one of:
 * 		* @var bool - assign the param a default value true or false, and command line param sets it to its counterpart
 * 		* @var string - assign the next param to the property, eg. --foo bar
 * 		* @var number - alias for string
 * 		* @var int - like string, but value will be intval'ed
 * 		* @var float - like string, but value will be floatval'ed
 * 		note that if a setter method named eg. _setParamFoo() is found in the class, it will be used. Also, these
 * 		setters are called with the default property values upon startup.
 * 		There are some predefined param setters, define their param as the commented ones to take advantage of them. You
 * 		can also override them, to use a different default value, but don't forget to copy the docblock as well.
 *
 * @package Cocktail\Shake
 * @author t
 * @version 1.01
 */
class Shake extends Cocktail\Shake {};

/**
 * Shake app commands
 *
 * @author t
 * @package Cocktail\Shake
 * @version 1.01
 */
class ShakeApp extends Cocktail\ShakeApp {};

/**
 * Shake conf commands
 *
 * @author t
 * @package Cocktail\Shake
 * @version 1.01
 */
class ShakeConf extends Cocktail\ShakeConf {};

/**
 * Shake tool main class
 * @author t
 * @package Cocktail\Router
 * @version 1.01
 */
class ShakeIndex extends Cocktail\ShakeIndex {};

/**
 * Shake mix commands
 *
 * @package Cocktail\Shake
 * @author t
 * @version 1.01
 */
class ShakeMix extends Cocktail\ShakeMix {};

/**
 * Classlist tool
 * @author t
 * @package Cocktail\Controller
 * @version 1.01
 */
class ShakeMixClasslist extends Cocktail\ShakeMixClasslist {};

/**
 * Model tool, to instanciate and measure models
 * eg.:
 *	./shake.php mix model UserWeb -s email no@ema.il -m
 *		(tells how many UserWeb models you could create with setting just login field, and tells how many of these can be done in a sec)
 * @author t
 * @package Cocktail\Controller
 * @version 1.01
 */
class ShakeMixModel extends Cocktail\ShakeMixModel {};

/**
 * Shake pack commands
 *
 * @author t
 * @package Cocktail\Shake
 * @version 1.01
 */
class ShakeMod extends Cocktail\ShakeMod {};

/**
 * Shake pack commands
 *
 * @author t
 * @package Cocktail\Shake
 * @version 1.01
 */
class ShakeModList extends Cocktail\ShakeModList {};

/**
 * @author t
 * @package Cocktail\User
 * @version 1.01
 */
class User extends Cocktail\User {};

/**
 * @author t
 * @package Cocktail\User
 * @version 1.01
 */
class UserWeb extends Cocktail\UserWeb {};

/**
 * @author t
 * @package Cocktail\View
 * @version 1.01
 */
class View extends Cocktail\View {};

/**
 * @author t
 * @package Cocktail\View
 * @version 1.01
 */
abstract class ViewAbstract extends Cocktail\ViewAbstract {};

/**
 * @author t
 * @package Cocktail\View
 * @version 1.01
 */
class ViewBasic extends Cocktail\ViewBasic {};

